openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about people and pizzas"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Person:
      type: "object"
      required:
        - lname
        - dni
      properties:
        id:
          type: "integer"
        fname:
          type: "string"
        lname:
          type: "string"
        dni:
          type: "string"
    Pizza:
      type: "object"
      properties:
        id:
          type: "integer"
        person_id:
          type: "integer"
        content:
          type: "string"

  parameters:
    id:
      name: "id"
      description: "ID of the person"
      in: path
      required: true
      schema:
        type: "integer"
    dni:
      name: "dni"
      description: "DNI of the person to retrieve"
      in: path
      required: true
      schema:
        type: "string"
    pizza_id:
      name: "pizza_id"
      description: "ID of the pizza"
      in: path
      required: true
      schema:
        type: "integer"

paths:
  /api/people:
    get:
      operationId: "people.read_all"
      tags:
        - "People"
      summary: "Read the list of people"
      responses:
        "200":
          description: "Successfully read people list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
    post:
      operationId: "people.create"
      tags:
        - "People"
      summary: "Create a person"
      requestBody:
        description: "Person to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: "Successfully created person"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "406":
          description: "Person with specified DNI already exists"

  /api/people/{dni}:
    get:
      operationId: "people.read_one_by_dni"
      tags:
        - "People"
      summary: "Read one person by DNI"
      parameters:
        - $ref: "#/components/parameters/dni"
      responses:
        "200":
          description: "Successfully read person by DNI"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "404":
          description: "Person with specified DNI not found"

  /api/people/{id}:
    put:
      operationId: "people.update"
      tags:
        - "People"
      summary: "Update a person by ID"
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        description: "Person data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: "Successfully updated person"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "404":
          description: "Person with specified ID not found"

    delete:
      operationId: "people.delete"
      tags:
        - "People"
      summary: "Delete a person by ID"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: "Successfully deleted person"
        "404":
          description: "Person with specified ID not found"

  /api/pizzas:
    post:
      operationId: "pizzas.create"
      tags:
        - Pizzas
      summary: "Create a pizza associated with a person"
      requestBody:
        description: "Pizza to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pizza"
      responses:
        "201":
          description: "Successfully created a pizza"

  /api/pizzas/{pizza_id}:
    get:
      operationId: "pizzas.read_one"
      tags:
        - Pizzas
      summary: "Read one pizza"
      parameters:
        - $ref: "#/components/parameters/pizza_id"
      responses:
        "200":
          description: "Successfully read one pizza"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pizza"
        "404":
          description: "Pizza not found"
    put:
      tags:
        - Pizzas
      operationId: "pizzas.update"
      summary: "Update a pizza"
      parameters:
        - $ref: "#/components/parameters/pizza_id"
      requestBody:
        description: "Updated pizza data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pizza"
      responses:
        "200":
          description: "Successfully updated pizza"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pizza"
        "404":
          description: "Pizza not found"
    delete:
      tags:
        - Pizzas
      operationId: "pizzas.delete"
      summary: "Delete a pizza"
      parameters:
        - $ref: "#/components/parameters/pizza_id"
      responses:
        "204":
          description: "Successfully deleted pizza"
        "404":
          description: "Pizza not found"

  /api/grouped_pizzas:
    get:
      summary: "Obtiene las pizzas agrupadas por fecha y cliente."
      tags:
        - "Pizzas"
      operationId: "pizzas.get_pizza_group"  # Asegúrate de que esto esté completo y coincida con el módulo donde está definida la función
      responses:
        '200':
          description: "Lista de pizzas agrupadas por fecha y cliente"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    timestamp:
                      type: "string"
                      format: "date-time"
                      description: "Fecha y hora en el formato YYYY-MM-DD HH:MM"
                    pizzas:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                            description: "ID de la pizza"
                          content:
                            type: "string"
                            description: "Descripción de la pizza"
                          client:
                            type: "object"
                            properties:
                              fname:
                                type: "string"
                                description: "Nombre del cliente"
                              lname:
                                type: "string"
                                description: "Apellido del cliente"
                              id:
                                type: "integer"
                                description: "ID del cliente"
